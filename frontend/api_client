<<<<<<< HEAD
import requests
import os

class PokemonAPIClient:
    def __init__(self, base_url):
        self.base_url = base_url.rstrip('/')
        
    def get_pokemon_by_name(self, name):

        try:
            response = requests.get(f"{self.base_url}/pokemon/{name}")
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 404:
                return None
            else:
                print(f"Error getting pokemon: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"Connection error: {e}")
            return None
    
    def add_pokemon(self, pokemon_data):

        try:
            response = requests.post(f"{self.base_url}/pokemon", json=pokemon_data)
            if response.status_code == 201:
                return True
            elif response.status_code == 409:
                print("Pokemon already exists")
                return False
            else:
                print(f"Error adding pokemon: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"Connection error: {e}")
            return False
    
    def get_all_pokemon(self):

        try:
            response = requests.get(f"{self.base_url}/pokemon")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"Error getting all pokemon: {response.status_code}")
                return {"pokemon": []}
        except requests.exceptions.RequestException as e:
            print(f"Connection error: {e}")
            return {"pokemon": []}
    
    def health_check(self):

        try:
            response = requests.get(f"{self.base_url}/health")
            return response.status_code == 200
        except requests.exceptions.RequestException:
=======
import requests
import os

class PokemonAPIClient:
    def __init__(self, base_url):
        self.base_url = base_url.rstrip('/')
        
    def get_pokemon_by_name(self, name):

        try:
            response = requests.get(f"{self.base_url}/pokemon/{name}")
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 404:
                return None
            else:
                print(f"Error getting pokemon: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"Connection error: {e}")
            return None
    
    def add_pokemon(self, pokemon_data):

        try:
            response = requests.post(f"{self.base_url}/pokemon", json=pokemon_data)
            if response.status_code == 201:
                return True
            elif response.status_code == 409:
                print("Pokemon already exists")
                return False
            else:
                print(f"Error adding pokemon: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"Connection error: {e}")
            return False
    
    def get_all_pokemon(self):

        try:
            response = requests.get(f"{self.base_url}/pokemon")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"Error getting all pokemon: {response.status_code}")
                return {"pokemon": []}
        except requests.exceptions.RequestException as e:
            print(f"Connection error: {e}")
            return {"pokemon": []}
    
    def health_check(self):

        try:
            response = requests.get(f"{self.base_url}/health")
            return response.status_code == 200
        except requests.exceptions.RequestException:
>>>>>>> 65e20a5 (Initial commit)
            return False